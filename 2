import requests
import ccxt
import pandas as pd
import matplotlib.pyplot as plt
import mplfinance as mpf
from io import BytesIO
import asyncio
import nest_asyncio
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CallbackQueryHandler, ContextTypes
import config  # Import the config module
import ta  # Import ta library
import logging
from datetime import datetime, timedelta
import time
import hmac
import hashlib
from urllib.parse import urlencode
import json
import telegram.error

# Set up logging to both console and file
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trading_bot.log'),  # Save logs to this file
        logging.StreamHandler()  # Still print to console
    ]
)
logger = logging.getLogger(__name__)

# Time intervals
interval = '4h'
fib_interval = '12h'

# Pionex API setup
BASE_URL = "https://api.pionex.com"
PIONEX_API_KEY = config.PIONEX_API_KEY
PIONEX_SECRET_KEY = config.PIONEX_SECRET_KEY

# Fetch symbols from Binance
url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
try:
    response = requests.get(url)
    response.raise_for_status()
    data = response.json()
    SELECTED_SYMBOLS = [
        s['symbol'] for s in data['symbols']
        if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING'
    ]
except requests.exceptions.RequestException as e:
    logger.error(f"Error fetching symbols: {e}")
    SELECTED_SYMBOLS = []

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config.BINANCE_API_KEY,
    'secret': config.BINANCE_API_SECRET,
})

# Store active orders and last alerts
active_orders = {}  # {symbol: {'order_id': str, 'sell_price': float, 'side': str}}
last_alert_messages = {}
ALERT_COOLDOWN = 240  # minutes

# Pionex API Functions
def generate_signature(method, path, params, body=None):
    timestamp = str(int(time.time() * 1000))
    query_params = params.copy()
    query_params['timestamp'] = timestamp
    sorted_params = urlencode(sorted(query_params.items()), quote_via=lambda x, *_: x)  # No URL encoding
    path_url = f"{path}?{sorted_params}"
    string_to_sign = f"{method.upper()}{path_url}"
    if body:
        body_str = json.dumps(body, separators=(',', ':'))
        string_to_sign += body_str
    logger.debug(f"String to sign: {string_to_sign}")
    signature = hmac.new(
        PIONEX_SECRET_KEY.encode('utf-8'),
        string_to_sign.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()
    logger.debug(f"Generated signature: {signature}")
    return signature, timestamp

def api_request(method, endpoint, params=None, body=None):
    if params is None:
        params = {}
    signature, timestamp = generate_signature(method, endpoint, params, body)
    params['timestamp'] = timestamp
    url = f"{BASE_URL}{endpoint}"
    headers = {
        "PIONEX-KEY": PIONEX_API_KEY,
        "PIONEX-SIGNATURE": signature,
        "Content-Type": "application/json"
    }
    logger.debug(f"Request URL: {url}")
    logger.debug(f"Headers: {headers}")
    if body:
        logger.debug(f"Body: {json.dumps(body)}")
    try:
        if method == "GET":
            response = requests.get(url, headers=headers, params=params)
        elif method == "POST":
            response = requests.post(url, headers=headers, params=params, data=json.dumps(body, separators=(',', ':')))
        elif method == "DELETE":
            response = requests.delete(url, headers=headers, params=params, data=json.dumps(body, separators=(',', ':')))
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"Pionex API request failed: {e}")
        if hasattr(e.response, 'text'):
            logger.error(f"Response text: {e.response.text}")
        return None

def get_symbol_info(symbol):
    endpoint = "/api/v1/common/symbols"
    pionex_symbol = symbol.replace("USDT", "_USDT")
    params = {"symbols": pionex_symbol}
    data = api_request("GET", endpoint, params)
    logger.info(f"Symbol info response for {pionex_symbol}: {data}")
    if data and 'data' in data and 'symbols' in data['data'] and data['data']['symbols']:
        return data['data']['symbols'][0]
    logger.error(f"Failed to fetch symbol info for {pionex_symbol}")
    return None

def place_market_order(symbol, side, amount_usdt=15.0):
    endpoint = "/api/v1/trade/order"
    params = {}
    symbol_info = get_symbol_info(symbol)
    if not symbol_info:
        logger.error(f"No symbol info for {symbol}")
        return None
    pionex_symbol = symbol.replace("USDT", "_USDT")
    current_price = get_current_price(symbol)
    if not current_price:
        logger.error(f"Failed to get current price for {pionex_symbol}")
        return None
    body = {
        "symbol": pionex_symbol,
        "side": side.upper(),
        "type": "MARKET",
    }
    if side.upper() == "BUY":
        body["amount"] = str(amount_usdt)
    else:  # SELL
        quantity = amount_usdt / current_price
        precision = int(symbol_info['basePrecision'])
        body["size"] = f"{quantity:.{precision}f}"
    response = api_request("POST", endpoint, params, body)
    logger.info(f"Market order response for {pionex_symbol}: {response}")
    if response and 'data' in response and response['result']:
        return response['data']['orderId']
    logger.error(f"Market order failed for {pionex_symbol}: {response}")
    return None

def place_limit_order(symbol, side, quantity, price):
    endpoint = "/api/v1/trade/order"
    params = {}
    symbol_info = get_symbol_info(symbol)
    if not symbol_info:
        logger.error(f"No symbol info for {symbol}")
        return None
    pionex_symbol = symbol.replace("USDT", "_USDT")
    precision = int(symbol_info['basePrecision'])
    body = {
        "symbol": pionex_symbol,
        "side": side.upper(),
        "type": "LIMIT",
        "size": f"{quantity:.{precision}f}",
        "price": str(price),
        "IOC": False
    }
    response = api_request("POST", endpoint, params, body)
    logger.info(f"Limit order response for {pionex_symbol}: {response}")
    if response and 'data' in response and response['result']:
        return response['data']['orderId']
    logger.error(f"Limit order failed for {pionex_symbol}: {response}")
    return None

def cancel_order(symbol, order_id):
    endpoint = "/api/v1/trade/order"
    pionex_symbol = symbol.replace("USDT", "_USDT")
    params = {}
    body = {
        "symbol": pionex_symbol,
        "orderId": order_id
    }
    response = api_request("DELETE", endpoint, params, body)
    logger.info(f"Cancel order response for {pionex_symbol} order {order_id}: {response}")
    return response and 'result' in response and response['result']

def get_current_price(symbol):
    endpoint = "/api/v1/market/depth"
    pionex_symbol = symbol.replace("USDT", "_USDT")
    params = {"symbol": pionex_symbol}
    data = api_request("GET", endpoint, params)
    logger.info(f"Price response for {pionex_symbol}: {data}")
    if data and 'data' in data and 'bids' in data['data']:
        return float(data['data']['bids'][0][0])
    logger.error(f"Failed to fetch price for {pionex_symbol}: {data}")
    return None

# Binance Data Functions
def get_historical_data(symbol, interval, limit=100):
    ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    df.columns = ['Open', 'High', 'Low', 'Close', 'Volume']
    return df

def calculate_ema(df, period):
    return ta.trend.EMAIndicator(df['Close'], window=period).ema_indicator()

def calculate_macd(df):
    macd = ta.trend.MACD(df['Close'])
    df['macd'] = macd.macd()
    df['signal'] = macd.macd_signal()
    df['histogram'] = macd.macd_diff()
    return df

def check_histogram_cross(df):
    calculate_macd(df)
    hist_cross_over = (df['histogram'].iloc[-2] > df['histogram'].iloc[-3] and 
                      df['histogram'].iloc[-3] <= df['histogram'].iloc[-4])
    hist_cross_under = (df['histogram'].iloc[-2] < df['histogram'].iloc[-3] and 
                       df['histogram'].iloc[-3] >= df['histogram'].iloc[-4])
    return hist_cross_over, hist_cross_under

def calculate_fibonacci_levels(df):
    high_price = df['High'].max()
    low_price = df['Low'].min()
    diff = high_price - low_price
    levels = {
        '0.0%': high_price,
        '23.6%': high_price - 0.236 * diff,
        '38.2%': high_price - 0.382 * diff,
        '50.0%': high_price - 0.5 * diff,
        '61.8%': high_price - 0.618 * diff,
        '100.0%': low_price
    }
    return levels

def plot_candles(df, fib_df, symbol, title):
    if df.empty or fib_df.empty:
        return None
    mpf_data = df[['Open', 'High', 'Low', 'Close']].copy()
    mc = mpf.make_marketcolors(up='#2fc71e', down='#ed2f1a', inherit=True)
    s = mpf.make_mpf_style(base_mpl_style=['bmh', 'dark_background'], marketcolors=mc, y_on_right=True)
    short_ema = calculate_ema(df, 3)
    long_ema = calculate_ema(df, 7)
    calculate_macd(df)
    macd_colors = [
        'green' if df['histogram'].iloc[i] > df['histogram'].iloc[i - 1] else 'red'
        for i in range(1, len(df['histogram']))
    ]
    macd_colors.insert(0, 'gray')
    fib_levels = calculate_fibonacci_levels(fib_df)

    fig, axlist = mpf.plot(
        mpf_data,
        figratio=(10, 6),
        type="candle",
        style=s,
        tight_layout=True,
        datetime_format='%H:%M',
        ylabel="Price ($)",
        addplot=[
            mpf.make_addplot(short_ema, color='cyan', width=1.5, linestyle='-'),
            mpf.make_addplot(long_ema, color='magenta', width=1.5, linestyle='-'),
            mpf.make_addplot(df['histogram'], type='bar', color=macd_colors, panel=1, ylabel="MACD Histogram")
        ],
        returnfig=True
    )
    ax = axlist[0]
    for level, price in fib_levels.items():
        ax.axhline(price, color='yellow', linestyle='-', linewidth=2)
        ax.annotate(f'{level}: {price:.2f}', xy=(1, price), xytext=(5, 0), textcoords='offset points',
                    ha='left', va='center', color='black', fontsize=8, backgroundcolor='white')
    ylim = [min(fib_levels.values()) - (0.05 * (max(fib_levels.values()) - min(fib_levels.values()))),
            max(fib_levels.values()) + (0.05 * (max(fib_levels.values()) - min(fib_levels.values())))]
    ax.set_ylim(ylim)
    ax.set_title(f"{symbol} - {title}", fontsize=25, style='italic', fontfamily='sans-serif')
    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)
    return buf

# Telegram Functions
async def send_telegram_message(bot: Bot, chat_id: str, symbol: str, message: str, image_buffer, close_price):
    if image_buffer is None:
        return
    current_time = datetime.now()
    alert_key = f"{symbol}_{message}"
    last_alert = last_alert_messages.get(symbol, {})
    if (last_alert.get('message') == message and 
        current_time - last_alert.get('timestamp', datetime.min) < timedelta(minutes=ALERT_COOLDOWN)):
        return

    await bot.send_photo(chat_id=chat_id, photo=image_buffer)
    keyboard = [[InlineKeyboardButton("BUY", callback_data=f"buy_{symbol}_{close_price}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)
    
    last_alert_messages[symbol] = {'message': message, 'timestamp': current_time}
    logger.info(f"Telegram message sent for {symbol}")

async def handle_telegram_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        await query.answer()
    except telegram.error.BadRequest as e:
        logger.warning(f"Failed to answer callback query: {e}")
    
    try:
        callback_data = query.data.replace('-', '_')  # Normalize to underscores
        logger.info(f"Received callback data: {callback_data}")
        parts = callback_data.split('_')
        if len(parts) != 3:  # Expect buy_<symbol>_<price>
            raise ValueError(f"Invalid callback data format: {callback_data}")
        
        action = parts[0]  # "buy"
        symbol = parts[1]  # e.g., "LTCUSDT"
        close_price = float(parts[2])  # e.g., 90.81
        
        if action != "buy":
            raise ValueError(f"Unknown action: {action}")
        
        # Place market buy order
        buy_order_id = place_market_order(symbol, "BUY")
        if not buy_order_id:
            await query.edit_message_text(f"Failed to place BUY order for {symbol}")
            return
        
        # Get current price and calculate sell price
        current_price = get_current_price(symbol)
        if not current_price:
            await query.edit_message_text(f"Failed to get price for {symbol}")
            return
        sell_price = current_price * 1.01
        quantity = 15.0 / current_price  # $15 worth
        symbol_info = get_symbol_info(symbol)
        if symbol_info:
            precision = int(symbol_info['basePrecision'])
            quantity = float(f"{quantity:.{precision}f}")
        else:
            await query.edit_message_text(f"Failed to get symbol info for {symbol}")
            return
        
        # Place limit sell order
        sell_order_id = place_limit_order(symbol, "SELL", quantity, sell_price)
        if not sell_order_id:
            await query.edit_message_text(f"Failed to place SELL order for {symbol}")
            return
        
        # Store order info
        active_orders[symbol] = {
            'order_id': sell_order_id,
            'sell_price': sell_price,
            'side': 'BUY'
        }
        await query.edit_message_text(f"Position opened with BUY for {symbol} at {current_price:.2f}\nSELL order placed at {sell_price:.2f}")
    except Exception as e:
        logger.error(f"Error in callback handler: {e}")
        await query.edit_message_text(f"Error processing request: {str(e)}")

async def check_alerts(bot: Bot):
    for symbol in SELECTED_SYMBOLS:
        try:
            historical_data = get_historical_data(symbol, interval)
            fib_data = get_historical_data(symbol, fib_interval, limit=20)
            hist_cross_over, hist_cross_under = check_histogram_cross(historical_data)

            if hist_cross_over:
                message = f"Buy #{symbol}"
                title = f'Histogram Cross Over {symbol}'
                image_buffer = plot_candles(historical_data, fib_data, symbol, title)
                await send_telegram_message(bot, config.CHAT_ID, symbol, message, image_buffer, historical_data['Close'].iloc[-1])
            
            if hist_cross_under and symbol in active_orders:
                order_info = active_orders[symbol]
                if order_info['side'] == 'BUY':
                    if cancel_order(symbol, order_info['order_id']):
                        sell_order_id = place_market_order(symbol, "SELL")
                        if sell_order_id:
                            del active_orders[symbol]
                            await bot.send_message(chat_id=config.CHAT_ID, 
                                                 text=f"Position closed with SELL for {symbol} due to histogram cross under")
                        else:
                            logger.error(f"Failed to place market SELL for {symbol}")
                    else:
                        logger.error(f"Failed to cancel SELL order for {symbol}")
        except Exception as e:
            logger.error(f"Error checking {symbol}: {e}")

async def run_alert_loop(application: Application):
    bot = application.bot
    while True:
        await check_alerts(bot)
        await asyncio.sleep(300)

async def main():
    application = Application.builder().token(config.TELEGRAM_TOKEN).build()
    application.add_handler(CallbackQueryHandler(handle_telegram_callback))
    asyncio.create_task(run_alert_loop(application))
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    nest_asyncio.apply()
    asyncio.run(main())