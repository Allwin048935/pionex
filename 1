import requests
import time
import hmac
import hashlib
from urllib.parse import urlencode
import json
import config  # Import config.py for API credentials

# API setup
BASE_URL = "https://api.pionex.com"
API_KEY = config.API_KEY
SECRET_KEY = config.SECRET_KEY

# Function to generate HMAC SHA256 signature
def generate_signature(method, path, params, body=None):
    timestamp = str(int(time.time() * 1000))
    query_params = params.copy()
    query_params['timestamp'] = timestamp
    sorted_params = urlencode(sorted(query_params.items()))
    path_url = f"{path}?{sorted_params}"
    string_to_sign = f"{method}{path_url}"
    if body:
        string_to_sign += json.dumps(body, separators=(',', ':'))
    signature = hmac.new(
        SECRET_KEY.encode('utf-8'),
        string_to_sign.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()
    return signature, timestamp

# Function to make authenticated API requests
def api_request(method, endpoint, params=None, body=None):
    if params is None:
        params = {}
    signature, timestamp = generate_signature(method, endpoint, params, body)
    params['timestamp'] = timestamp
    url = f"{BASE_URL}{endpoint}"
    headers = {
        "PIONEX-KEY": API_KEY,
        "PIONEX-SIGNATURE": signature,
        "Content-Type": "application/json"
    }
    try:
        if method == "GET":
            response = requests.get(url, headers=headers, params=params)
        elif method == "POST":
            response = requests.post(url, headers=headers, params=params, data=json.dumps(body, separators=(',', ':')))
        else:
            raise ValueError("Unsupported method")
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"API request failed: {e}")
        return None

# Function to get symbol info (e.g., minAmount, precision)
def get_symbol_info(symbol="BTC_USDT"):
    endpoint = "/api/v1/common/symbols"
    params = {"symbols": symbol}
    data = api_request("GET", endpoint, params)
    if data and 'data' in data and 'symbols' in data['data'] and data['data']['symbols']:
        return data['data']['symbols'][0]
    print(f"Error: Failed to fetch symbol info for {symbol}")
    return None

# Function to get account balance
def get_balance(currency="USDT"):
    endpoint = "/api/v1/account/balances"
    params = {}
    data = api_request("GET", endpoint, params)
    if data and 'data' in data and 'balances' in data['data']:
        for balance in data['data']['balances']:
            if balance['coin'] == currency:
                return float(balance['free'])
    print(f"Error: Failed to fetch balance for {currency}")
    return 0.0

# Function to get current price using market depth
def get_price(symbol="BTC_USDT"):
    endpoint = "/api/v1/market/depth"
    params = {"symbol": symbol}
    data = api_request("GET", endpoint, params)
    if data and 'data' in data and 'bids' in data['data'] and data['data']['bids']:
        top_bid = float(data['data']['bids'][0][0])  # [price, quantity]
        return top_bid
    print("Error: Failed to fetch price data from market depth")
    return None

# Function to place an order
def place_order(symbol, side, quantity, price, precision):
    endpoint = "/api/v1/trade/order"
    params = {}
    body = {
        "symbol": symbol,
        "side": side.upper(),
        "type": "LIMIT",
        "size": f"{quantity:.{precision}f}",  # Use dynamic precision from symbol info
        "price": str(price),
        "IOC": False
    }
    print(f"Placing order with size: {body['size
