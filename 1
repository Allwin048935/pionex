import requests
import time
import hmac
import hashlib
from urllib.parse import urlencode
import json
import config  # Import config.py for API credentials

# API setup
BASE_URL = "https://api.pionex.com"
API_KEY = config.API_KEY
SECRET_KEY = config.SECRET_KEY

# Function to generate HMAC SHA256 signature
def generate_signature(method, path, params, body=None):
    timestamp = str(int(time.time() * 1000))
    query_params = params.copy()
    query_params['timestamp'] = timestamp
    sorted_params = urlencode(sorted(query_params.items()))
    path_url = f"{path}?{sorted_params}"
    string_to_sign = f"{method}{path_url}"
    if body:
        string_to_sign += json.dumps(body, separators=(',', ':'))
    signature = hmac.new(
        SECRET_KEY.encode('utf-8'),
        string_to_sign.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()
    return signature, timestamp

# Function to make authenticated API requests
def api_request(method, endpoint, params=None, body=None):
    if params is None:
        params = {}
    signature, timestamp = generate_signature(method, endpoint, params, body)
    params['timestamp'] = timestamp
    url = f"{BASE_URL}{endpoint}"
    headers = {
        "PIONEX-KEY": API_KEY,
        "PIONEX-SIGNATURE": signature,
        "Content-Type": "application/json"
    }
    try:
        if method == "GET":
            response = requests.get(url, headers=headers, params=params)
        elif method == "POST":
            response = requests.post(url, headers=headers, params=params, data=json.dumps(body, separators=(',', ':')))
        else:
            raise ValueError("Unsupported method")
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"API request failed: {e}")
        return None

# Function to get symbol info (e.g., minAmount, precision)
def get_symbol_info(symbol="BTC_USDT"):
    endpoint = "/api/v1/common/symbols"
    params = {"symbols": symbol}
    data = api_request("GET", endpoint, params)
    if data and 'data' in data and 'symbols' in data['data'] and data['data']['symbols']:
        return data['data']['symbols'][0]
    print(f"Error: Failed to fetch symbol info for {symbol}")
    return None

# Function to get account balance
def get_balance(currency="USDT"):
    endpoint = "/api/v1/account/balances"
    params = {}
    data = api_request("GET", endpoint, params)
    if data and 'data' in data and 'balances' in data['data']:
        for balance in data['data']['balances']:
            if balance['coin'] == currency:
                return float(balance['free'])
    print(f"Error: Failed to fetch balance for {currency}")
    return 0.0

# Function to get current price using market depth
def get_price(symbol="BTC_USDT"):
    endpoint = "/api/v1/market/depth"
    params = {"symbol": symbol}
    data = api_request("GET", endpoint, params)
    if data and 'data' in data and 'bids' in data['data'] and data['data']['bids']:
        top_bid = float(data['data']['bids'][0][0])  # [price, quantity]
        return top_bid
    print("Error: Failed to fetch price data from market depth")
    return None

# Function to place an order
def place_order(symbol, side, quantity, price, precision):
    endpoint = "/api/v1/trade/order"
    params = {}
    body = {
        "symbol": symbol,
        "side": side.upper(),
        "type": "LIMIT",
        "size": f"{quantity:.{precision}f}",  # Use dynamic precision from symbol info
        "price": str(price),
        "IOC": False
    }
    response = api_request("POST", endpoint, params, body)
    if response and 'data' in response and response['result']:
        return response['data']
    else:
        print(f"Order placement failed: {response}")
        return None

# Trading bot logic
def trading_bot():
    symbol = "BTC_USDT"
    buy_threshold = 86000  # Buy if price < $86,000
    sell_threshold = 88000  # Sell if price > $88,000
    target_usdt = 15.0     # Target $15 worth of BTC per trade
    holding = False        # Track if we own BTC

    # Get symbol info to validate trading parameters
    symbol_info = get_symbol_info(symbol)
    if not symbol_info:
        print("Bot stopped due to symbol info failure")
        return
    min_amount = float(symbol_info['minAmount'])  # e.g., 10 USDT
    min_trade_size = float(symbol_info['minTradeSize'])  # e.g., 0.000001 BTC
    base_precision = int(symbol_info['basePrecision'])  # e.g., 6 for BTC_USDT
    print(f"Minimum order amount for {symbol}: ${min_amount}")
    print(f"Minimum trade size for {symbol}: {min_trade_size} BTC")
    print(f"Base precision for {symbol}: {base_precision}")

    print("Starting Pionex trading bot...")
    while True:
        try:
            price = get_price(symbol)
            if price is None:
                time.sleep(60)
                continue

            # Calculate quantity for $15 worth of BTC
            quantity = target_usdt / price
            if quantity < min_trade_size:
                quantity = min_trade_size  # Ensure at least minimum trade size

            print(f"Current {symbol} price: ${price}")
            print(f"Calculated quantity: {quantity:.8f} BTC (${quantity * price:.2f})")

            # Check balance and minimum amount
            order_amount = price * quantity
            if order_amount < min_amount:
                print(f"Order amount ${order_amount:.2f} below minimum ${min_amount}. Skipping trade.")
                time.sleep(60)
                continue

            if not holding:
                usdt_balance = get_balance("USDT")
                print(f"Available USDT balance: ${usdt_balance:.2f}")
                if usdt_balance < order_amount:
                    print(f"Insufficient USDT (${usdt_balance:.2f} < ${order_amount:.2f}). Skipping trade.")
                    time.sleep(60)
                    continue

            if not holding and price < buy_threshold:
                print(f"Price below ${buy_threshold}! Buying {quantity:.8f} BTC at ${price}")
                result = place_order(symbol, "BUY", quantity, price, base_precision)
                if result:
                    print(f"Buy order placed: Order ID {result['orderId']}")
                    holding = True
            elif holding and price > sell_threshold:
                print(f"Price above ${sell_threshold}! Selling {quantity:.8f} BTC at ${price}")
                result = place_order(symbol, "SELL", quantity, price, base_precision)
                if result:
                    print(f"Sell order placed: Order ID {result['orderId']}")
                    holding = False
            else:
                print("No action taken.")

            time.sleep(60)  # Check every minute
        except Exception as e:
            print(f"Error in bot loop: {e}")
            time.sleep(60)

# Run the bot
if __name__ == "__main__":
    trading_bot()
